from Auxiliary.utils import *
from Model import llm_qa


# Custom functions for buttons
def delete_message(_, message_tg):
    Message.botDeleteMessage(message_tg)
    # –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑—Ä–∞—â–∞–µ–º, —á—Ç–æ–±—ã –¥–∞–ª—å—à–µ —à–ª–æ –∫–∞–∫ —Å –æ–±—ã—á–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏


def clear_next_step_handler(_, message_tg):
    bot.clear_step_handler_by_chat_id(
        message_tg.chat.id)  # –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º step_handler
    # –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑—Ä–∞—â–∞–µ–º, —á—Ç–æ–±—ã –¥–∞–ª—å—à–µ —à–ª–æ –∫–∞–∫ —Å –æ–±—ã—á–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏


def delete_clear(*args):
    clear_next_step_handler(*args)
    delete_message(*args)
    # –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑—Ä–∞—â–∞–µ–º, —á—Ç–æ–±—ã –¥–∞–ª—å—à–µ —à–ª–æ –∫–∞–∫ —Å –æ–±—ã—á–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏


# Custom functions for messages
def ask_question(message_tg):
    clear_next_step_handler(None, message_tg)
    Message.botDeleteMessage(message_tg)

    botMessage = message_question_ask.line(message_tg, deleting_message=False)
    bot.register_next_step_handler(botMessage, answer_question(botMessage))
    return True


def answer_question(botMessage):
    def wrapper(message_tg):
        nonlocal botMessage
        Message.userSendLogger(message_tg)
        Message.botDeleteMessage(message_tg)

        botMessage = message_answer_processing.line(botMessage)

        # ML
        try:
            question = message_tg.text.replace("_", "-")
            output = llm_qa.respond_question(question)

            answer = html.escape(output)
            answer = answer[:answer.index('–°–ü–ò–°–û–ö –õ–ò–¢–ï–†–ê–¢–£–†–´:')].strip()

            decryption = {
                '–ò–°–¢–û–ß–ù–ò–ö–ò:': '<b>–ò–°–¢–û–ß–ù–ò–ö–ò:</b>',
                "_": "-",
            }

            for key, value in decryption.items():
                answer = answer.replace(key, value)

            message = Message(get_text_question_answer(question, answer),
                              ((Button("–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", f"{question}_correct"),),
                               (Button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", f"{question}_{answer}_send"),),))

            message.line(botMessage)
        except Exception as e:
            print(e)
            message_answer_error.line(botMessage)

    return wrapper


def send_answer(botMessage, data, message_history):
    def wrapper(message_tg):
        nonlocal botMessage, data, message_history
        Message.userSendLogger(message_tg)
        Message.botDeleteMessage(message_tg)

        question, answer = data

        if "<b>–ò–°–¢–û–ß–ù–ò–ö–ò:</b>" in answer:
            idx = answer.index("<b>–ò–°–¢–û–ß–ù–ò–ö–ò:</b>")
            answer = answer[:idx].strip().replace('\n', '<br>')

        email = message_tg.text
        try:
            html_content = f"""
<html>
    <body style="font-family: Arial, sans-serif; line-height: 1.6;">
        <p>–£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å,</p>
        <p>–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –≤–æ–ø—Ä–æ—Å:</p>
        <br>
        
        <h3 style="color: #333;">–í–æ–ø—Ä–æ—Å:</h3>
        <blockquote style="border-left: 4px solid #ddd; margin-left: 10px; padding-left: 10px;">
            <strong>{question}</strong>
        </blockquote>
        
        <br>
        
        <h3 style="color: #333;">–û—Ç–≤–µ—Ç:</h3>
        <blockquote style="border-left: 4px solid #4CAF50; margin-left: 10px; padding-left: 10px; color: #333;">
            <strong>{answer}</strong>
        </blockquote>
        
        <br>
        <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,</p>
        <p>–ö–æ–º–∞–Ω–¥–∞ —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ RUTUBE</p>
    </body>
</html>
"""
            botMessage = message_email_processing.line(botMessage)
            send_email(email, "–û—Ç–≤–µ—Ç –æ—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ RUTUBE", html_content)

            message = Message(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø–æ—á—Ç—É {email} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", ((button.close,),))
            message.line(botMessage)
        except Exception as _:
            message_email_error.line(botMessage)
        else:
            message = Message(f"{get_text_question_answer(*data)}\n\n"
                              f"<i>–û—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email: <u>{email}</u></i>", ((button.close,),))
            message.line(message_history)

    return wrapper


def correct_answer(botMessage, question, message_history):
    def wrapper(message_tg):
        nonlocal botMessage, question, message_history
        Message.userSendLogger(message_tg)

        Message.botDeleteMessage(message_tg)
        Message.botDeleteMessage(botMessage)

        answer = message_tg.text
        message = Message(get_text_question_answer(question, answer),
                          ((Button("–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", f"{question}_correct"),),
                           (Button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", f"{question}_{answer}_send"),),))

        message.line(message_history)

    return wrapper


# Buttons
button = Button('', '')

# Question
Button("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "question")

# Back
Button("üîô –ù–∞–∑–∞–¥ üîô", "back_to_start")

# Cancel / close
Button("‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å ‚úñÔ∏è", "delete_clear", func=delete_clear)
Button("‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å ‚úñÔ∏è", "cancel_question", func=delete_clear)
Button("‚úñÔ∏è –ó–∞–∫—Ä—ã—Ç—å ‚úñÔ∏è", "close", func=delete_message)

# Messages

# Contacts
message_contacts = Message("<b>–°–æ–∑–¥–∞—Ç–µ–ª–∏:</b>",
                           ((Button("–†–æ–¥–∏–æ–Ω–æ–≤ –°–µ–º—ë–Ω", "https://t.me/sefixnep", is_link=True),),
                            (Button("–ê–Ω–¥—Ä–µ–π –ì–ª–∏–Ω—Å–∫–∏–π", "https://t.me/AI_glinsky", is_link=True),
                             Button("–†—è–±–æ–≤ –î–µ–Ω–∏—Å", "https://t.me/denpower", is_link=True),),
                            (Button("–î–µ–º–µ–Ω—Ç—å–µ–≤ –≠–¥—É–∞—Ä–¥", "https://t.me/SilaVelesa", is_link=True),
                             Button("–†—è–±–æ–≤ –î–µ–Ω–∏—Å", "https://t.me/ozols_s", is_link=True),),
                            (button.close,),
                            ))

# Start
message_start = Message("<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <USERNAME>!</b>\n"
                        "<b>–ú–µ–Ω—è –∑–æ–≤—É—Ç</b> - <code>–†—É—Ç—É–±–∏–∫</code>\n\n"
                        "<i>–ß—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –µ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–Ω—É—é —á–∞—Å—Ç—å\n"
                        "–£—á—Ç–∏—Ç–µ, –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ Email, –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—é—Ç—Å—è!\n"
                        "<b>–ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é!</b></i>")

# Ask question
message_question_ask = Message("<b>–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!</b>",
                               ((button.cancel_question,),),
                               button.question,
                               func=ask_question)

# # Processing
message_answer_processing = Message("<b>–ì–æ—Ç–æ–≤–∏–º –æ—Ç–≤–µ—Ç...</b>")

# # Error
message_answer_error = Message("<b>–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.</b>", ((button.close,),))

# Correct answer
message_correct_answer = Message("<b>–í–≤–µ–¥–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:</b>", ((button.delete_clear,),))


# Get email
message_email_get = Message("<b>–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ <u>Email</u> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>",
                            ((button.delete_clear,),))

# # Sending
message_email_processing = Message("<b>–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...</b>")

# # Error
message_email_error = Message("<b>Email –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>",
                              ((button.close,),))
